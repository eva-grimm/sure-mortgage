<p>
This applet is a loan calculator that takes the basic terms of a loan and provides the overall costs of it and a breakdown of each month's payment. It is structured in seven functions, and its HTML includes one template and an eventListener. The eventListener calls the entry point, getTerms(). Let's dive in.
</p>

<h5>The Template</h5>
<p>
The applet uses one template, table-row-template. This template is a simple 'tr' tag encasing mulitple 'td' tags with data-ids matching the properties of loan elements and is used by populateTable() to build the loan breakdown table at the bottom of the applet page.
</p>

<h5>The Event Listener</h5>
<p>
The applet's HTML has an event listener embedded using a script tag. The script gets the form used to obtain the loan terms, and it listens for a submit event. Once triggered, it prevents the page from reloading and calls getTerms().
</p>

<h5>getTerms()</h5>
<p>
This function is the entry point of the applet and sets the stage for the applet to process the provided loan terms. It begins by calling cleanSlate() to reset the HTML elements to their defaults (other than the app logo being visible). It then retrieves the loan terms, runs passes each to regex() as an argument, and parses the results as floats (except for term months, which is parsed as an integer). It finally checks whether any of the provided terms is not a number, which will be the case if any of the values provided by the user are not numbers greater than 0. If all is will, it calls calculate(), passing the loan amount, term in months, and interest rate as arguments.
</p>

<h5>cleanSlate()</h5>
<p>
This function's purpose is to reset the HTML elements to their defaults. The sole exception is the large app logo, which remains invisible. All elements in the HTML that are changed using DOM manipulation during use of the applet are found and declared as constants, then those constants are set te their default states.
</p>

<h5>regex()</h5>
<p>
This function's purpose is verifying the user has provided a valid input, which it accepts as an argument, 'input'. It begins by declaring a constant, global regex pattern that excludes anything that is not the numbers 0-9 or a '-', then it uses that pattern to remove all characters in input that do not match the pattern. 
</p>
<p>
Once the pattern is run, the function checks if input is now a blank string or a negative number. If so, it finds the HTML elements it needs to display an error message and declares them as constants. It then displays an error message that explains the input data is bad, which inputs are at issue, and will not return a value, ensuring getTerms() does not run calculate() later.
</p>
<p>
If the input is blank after excluding non-numbers, then the function returns a boolean of false. Otherwise, it returns the processed input.
</p>

<h5>calculate()</h5>
<p>
This function's purpose is to calculate the monthly loan payment and the breakdown of each month's loan payment. It accepts as parameters the loan terms: the loan amount, the loan term, and the interest rate. It begins by declaring a variable, 'balance', and sets its value to the loan amount (these are equivalent at the beginning of the loan). It then declares 'totalInterest' as 0, which will be used to keep a running tally of interest payments to be displayed later.
</p>
<p>
The function then starts a for-loop with an index, 'i', equal to 1 and iterates the loop while the index is less than or equal to the months in the loan term. The loop begins by establishing that months interest payment and adding that payment to totalInterest. It then determines the principal payment and subtracts it from balance. Finally, it calls populateTable() and passes index, total monthly payment, principal payment, interest payment, totalInterest, and balance as arguments.
</p>
<p>
Once the for-loop is done iterating through each month, the function calls displayTotals() and passes the loan amount, total monthly payment, and total interest as arguments.
</p>

<h5>populateTable()</h5>
<p>
This function's purpose is to generate a table that displays the breakdown of each monthly payment. It accepts as parameters the elements that will go into each cell in the row. The function begins by finding the table and the row template and declaring them as constants. 
</p>
<p>
The function then clones the template and applies each of the parameters to their respective table row cell. All parameters except month are formatted by passing the parameters as arguments to convertToUSD(), and if balance is negative, then the string '$0.00' is applied to that table cell instead. Once the clone is filled with the parameters, it is appended to the table.
</p>

<h5>displayTotals()</h5>
<p>
This function's purpose is to place the last pieces of the loan in the applet HTML and make all the loan elements generated through earlier functions visible to the user. The function begins by finding each of the HTML elements it will be changing with DOM manipulation and declaring them as constants.
</p>
<p>
Once the constants are declared, the function hides the large app logo (this is only necessary on the first run of the applet) and makes the results and table visible. The function then passes the total monthly payment, total principle, total interest, and total cost to convertToUSD() and places the returned values into results.
</p>

<h5>convertToUSD()</h5>
<p>
This function's purpose is to format the number passed to it as a parameter into USD (i.e., listed in $ and rounded to the nearest cent). The function first declares the constant 'USDollar' with a USD formatter. It then rounds number to two decimal points using the toFixed method with an argument of 2. Finally, it passes the rounded number to the USDollar formatter and returns the outcome.
</p>